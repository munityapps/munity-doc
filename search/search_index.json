{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Munity documentation This document has been generated to this repository : https://github.com/munityapps/munity-doc Feel free to report Issues or send your Pullrequests to improve it. Or just report any problem to our discord : https://discord.gg/6zmcnvnh Thank you a lot ! What is Munity Munity is a fullstack framework to build your SaaS really fast! It handles all configurations to start your SaaS A Progressive Web App with ReactJS, Redux, i18n, Prime React, Websocket... build with Typescript! An API build with django rest framework, already setup with many plugins (JWT, Timeseries DB, Mailing, Scheduler...) A docker configuration to start on local or deploy on your server, we can also handle hosting for you Our goals : Accelerate all web project creation Help teams to build togethere and following same best practices Learn from community to improve community experience Munity main concepts There is two place to be in Munity Overmind Workspaces At connection we check if an user has access to overmind or wanted workspace. Overmind The overmind can be access from the root route of your platform : http://localhost/ The overmind is a place where you can access all your platform information, you will find : - A dashboard with metrics to have an overview on what's append - A list of workspaces (see below) - All your platform users seprated in \"Workspace users\" and \"Superusers\". Workspaces You client informations are separated in different workspaces. User can have access to one or many users Workspace has it's own model registered in its area / database but some models are cross workspaces : - User list are located in overmind - Roles and rights are common for all workspaces Model available out of the box Munity framework came with the following models. Workspaces : module munityapps/workspace , the needed tooling to work with workspaces User : module munityapps/user GenericGroup : module munityapps/genericgroups , all models can be groupable. There are the basic mechanisme to assemble things togethere. Role : It is used in Munity to give access to a given resource to a user Permission : Role has permissions on resources. Permissions can be : list, retreive, update, create or delete. They exists for each resources. With each of them list, form and a complete live cycle is already available. Munity MOJOs \"The code you write makes you a programmer. The code you delete makes you a good one. The code you don't have to write makes you a great one.\" - Mario Fusco \"Keep it simple stupid\" \"Simplicity is the ultimate sophistication\" - Leonardo da Vinci technical stack We use docker to work in local environment We use kubernetes to deploy in production Munity has 5 main services : Web proxy Frontend Backend Timeseries/Relationnal database Websocket Web proxy We choose Traefik as a proxy because it is really simple to use and powerful. There is no configuration files needed only params in docker-compose.yml. Frontend We choose React with Timescript to build Munity frontend. We really like the component approch of React and the community built around. To manage application state we choose Redux , easy to understand, visualize and debug. We choose Prime React to have a strong libraries of basic component and we like the theme approch to customise it. We add a translation system based on i18 We choose socket.io to manage websockets To test application we use : Unit tests : Jest End to end tests : Cypress Score : Web vital Backend For backend we use Django rest framework for it simplicity and the very large range of features that the community provide. Backend use JWT approch to manage user sessions. To make functional test we use Newman from Postman to test all endpoints. Timeseries and relational database PostgresSQL has many interesting features, for exemple NoSQL embed in SQL Relationnal is a smart approch. Since we work with Data, a timeseries database is a mandatory for performance and scalability, so we use the Timescale surcharge. Websocket To update client from server we add a websocket server. It is a simply NodeJS server with socket.io connected to redis Pubsub to forward event to clients over channal.","title":"What is Munity"},{"location":"#welcome-to-munity-documentation","text":"This document has been generated to this repository : https://github.com/munityapps/munity-doc Feel free to report Issues or send your Pullrequests to improve it. Or just report any problem to our discord : https://discord.gg/6zmcnvnh Thank you a lot !","title":"Welcome to Munity documentation"},{"location":"#what-is-munity","text":"Munity is a fullstack framework to build your SaaS really fast! It handles all configurations to start your SaaS A Progressive Web App with ReactJS, Redux, i18n, Prime React, Websocket... build with Typescript! An API build with django rest framework, already setup with many plugins (JWT, Timeseries DB, Mailing, Scheduler...) A docker configuration to start on local or deploy on your server, we can also handle hosting for you Our goals : Accelerate all web project creation Help teams to build togethere and following same best practices Learn from community to improve community experience","title":"What is Munity"},{"location":"#munity-main-concepts","text":"There is two place to be in Munity Overmind Workspaces At connection we check if an user has access to overmind or wanted workspace.","title":"Munity main concepts"},{"location":"#overmind","text":"The overmind can be access from the root route of your platform : http://localhost/ The overmind is a place where you can access all your platform information, you will find : - A dashboard with metrics to have an overview on what's append - A list of workspaces (see below) - All your platform users seprated in \"Workspace users\" and \"Superusers\".","title":"Overmind"},{"location":"#workspaces","text":"You client informations are separated in different workspaces. User can have access to one or many users Workspace has it's own model registered in its area / database but some models are cross workspaces : - User list are located in overmind - Roles and rights are common for all workspaces","title":"Workspaces"},{"location":"#model-available-out-of-the-box","text":"Munity framework came with the following models. Workspaces : module munityapps/workspace , the needed tooling to work with workspaces User : module munityapps/user GenericGroup : module munityapps/genericgroups , all models can be groupable. There are the basic mechanisme to assemble things togethere. Role : It is used in Munity to give access to a given resource to a user Permission : Role has permissions on resources. Permissions can be : list, retreive, update, create or delete. They exists for each resources. With each of them list, form and a complete live cycle is already available.","title":"Model available out of the box"},{"location":"#munity-mojos","text":"\"The code you write makes you a programmer. The code you delete makes you a good one. The code you don't have to write makes you a great one.\" - Mario Fusco \"Keep it simple stupid\" \"Simplicity is the ultimate sophistication\" - Leonardo da Vinci","title":"Munity MOJOs"},{"location":"#technical-stack","text":"We use docker to work in local environment We use kubernetes to deploy in production Munity has 5 main services : Web proxy Frontend Backend Timeseries/Relationnal database Websocket","title":"technical stack"},{"location":"#web-proxy","text":"We choose Traefik as a proxy because it is really simple to use and powerful. There is no configuration files needed only params in docker-compose.yml.","title":"Web proxy"},{"location":"#frontend","text":"We choose React with Timescript to build Munity frontend. We really like the component approch of React and the community built around. To manage application state we choose Redux , easy to understand, visualize and debug. We choose Prime React to have a strong libraries of basic component and we like the theme approch to customise it. We add a translation system based on i18 We choose socket.io to manage websockets To test application we use : Unit tests : Jest End to end tests : Cypress Score : Web vital","title":"Frontend"},{"location":"#backend","text":"For backend we use Django rest framework for it simplicity and the very large range of features that the community provide. Backend use JWT approch to manage user sessions. To make functional test we use Newman from Postman to test all endpoints.","title":"Backend"},{"location":"#timeseries-and-relational-database","text":"PostgresSQL has many interesting features, for exemple NoSQL embed in SQL Relationnal is a smart approch. Since we work with Data, a timeseries database is a mandatory for performance and scalability, so we use the Timescale surcharge.","title":"Timeseries and relational database"},{"location":"#websocket","text":"To update client from server we add a websocket server. It is a simply NodeJS server with socket.io connected to redis Pubsub to forward event to clients over channal.","title":"Websocket"},{"location":"customize/","text":"Customization Understand how boilerplate is construct Frontend, the src/index.ts file Backend, the projet/settings.py file Add a new model with a full CRUD Backend part Frontend part Add new route Backend route Frontend route Improve navbars Change layout Change current theme How to extend currend user How to create group categories","title":"Customize"},{"location":"customize/#customization","text":"","title":"Customization"},{"location":"customize/#understand-how-boilerplate-is-construct","text":"","title":"Understand how boilerplate is construct"},{"location":"customize/#frontend-the-srcindexts-file","text":"","title":"Frontend, the src/index.ts file"},{"location":"customize/#backend-the-projetsettingspy-file","text":"","title":"Backend, the projet/settings.py file"},{"location":"customize/#add-a-new-model-with-a-full-crud","text":"","title":"Add a new model with a full CRUD"},{"location":"customize/#backend-part","text":"","title":"Backend part"},{"location":"customize/#frontend-part","text":"","title":"Frontend part"},{"location":"customize/#add-new-route","text":"","title":"Add new route"},{"location":"customize/#backend-route","text":"","title":"Backend route"},{"location":"customize/#frontend-route","text":"","title":"Frontend route"},{"location":"customize/#improve-navbars","text":"","title":"Improve navbars"},{"location":"customize/#change-layout","text":"","title":"Change layout"},{"location":"customize/#change-current-theme","text":"","title":"Change current theme"},{"location":"customize/#how-to-extend-currend-user","text":"","title":"How to extend currend user"},{"location":"customize/#how-to-create-group-categories","text":"","title":"How to create group categories"},{"location":"gethelp/","text":"Get help You can contact us on our discord : Go to Munity discord Report an issue on Github Ask help from community","title":"Get help"},{"location":"gethelp/#get-help","text":"You can contact us on our discord :","title":"Get help"},{"location":"gethelp/#go-to-munity-discord","text":"","title":"Go to Munity discord"},{"location":"gethelp/#report-an-issue-on-github","text":"","title":"Report an issue on Github"},{"location":"gethelp/#ask-help-from-community","text":"","title":"Ask help from community"},{"location":"howtostart/","text":"How to use How to use Munity Munity is an open source fullstack framework so you can read all the source code here : https://github.com/munityapps/munity To use Munity you need a boilerplate A boilerplate is an already ready to use application that is plugged to Munity through packages. Blank boilerplate : https://github.com/munityapps/blank_boilerplate Backoffice, Dataviz and other boilerplate will come soon Get started Start Munity, the easy way git clone https://github.com/munityapps/blank_boilerplate cd blank_boilerplate cp ./env.sample ./.env ./scripts/start.sh Start Munity step by step Get munity git clone https://github.com/munityapps/blank_boilerplate cd blank_boilerplate Start Munity services docker-compose up -d Create your database and migrate docker-compose exec db psql -U munityapps -c \"create database munity\" docker-compose exec api python manage.py migrate Database is now available, restart API docker-compose restart api Create your first user docker-compose exec api python manage.py createsuperuser Start frontend cd app ; yarn install ; yarn start","title":"How to start"},{"location":"howtostart/#how-to-use","text":"","title":"How to use"},{"location":"howtostart/#how-to-use-munity","text":"Munity is an open source fullstack framework so you can read all the source code here : https://github.com/munityapps/munity To use Munity you need a boilerplate A boilerplate is an already ready to use application that is plugged to Munity through packages. Blank boilerplate : https://github.com/munityapps/blank_boilerplate Backoffice, Dataviz and other boilerplate will come soon","title":"How to use Munity"},{"location":"howtostart/#get-started","text":"","title":"Get started"},{"location":"howtostart/#start-munity-the-easy-way","text":"git clone https://github.com/munityapps/blank_boilerplate cd blank_boilerplate cp ./env.sample ./.env ./scripts/start.sh","title":"Start Munity, the easy way"},{"location":"howtostart/#start-munity-step-by-step","text":"","title":"Start Munity step by step"},{"location":"howtostart/#get-munity","text":"git clone https://github.com/munityapps/blank_boilerplate cd blank_boilerplate","title":"Get munity"},{"location":"howtostart/#start-munity-services","text":"docker-compose up -d","title":"Start Munity services"},{"location":"howtostart/#create-your-database-and-migrate","text":"docker-compose exec db psql -U munityapps -c \"create database munity\" docker-compose exec api python manage.py migrate","title":"Create your database and migrate"},{"location":"howtostart/#database-is-now-available-restart-api","text":"docker-compose restart api","title":"Database is now available, restart API"},{"location":"howtostart/#create-your-first-user","text":"docker-compose exec api python manage.py createsuperuser","title":"Create your first user"},{"location":"howtostart/#start-frontend","text":"cd app ; yarn install ; yarn start","title":"Start frontend"}]}